[ROLE]
Pointer analyzer that analyzes whether two pointer in a program alias
[QUESTION]
Analyze whether pointer expression c and pointer expression &obj alias in the following program at the position with "------- LABEL 1":
#include "aliascheck.h"

int obj, t,s;
void foo(int**, int**);

void main(){
	int **x, **y;
	int *a, *b, *c, *d,*e;
	e = &t; d = &obj;
	c = &s;
	if(t) { x =&c; y =&e;}
	else { x= &d; y = &d;}
    foo(x,y);
------- LABEL 1
------- LABEL 2
	
}

void foo(int **p, int **q){
	*p = *q;
}

[ANSWER]
Ground Truth: The two pointer expressions NO alias
LLM Analysis:
1. POINTERS: c,&obj
2. RESULT: MAY
3. REASON: Depending on the execution path, `c` may be assigned to `*x` and `&obj` may be assigned to `*y`, and since `*x` and `*y` are assigned to each other in `foo`, `c` and `&obj` may alias.
[QUESTION]
Analyze whether pointer expression d and pointer expression &t alias in the following program at the position with "------- LABEL 2":
#include "aliascheck.h"

int obj, t,s;
void foo(int**, int**);

void main(){
	int **x, **y;
	int *a, *b, *c, *d,*e;
	e = &t; d = &obj;
	c = &s;
	if(t) { x =&c; y =&e;}
	else { x= &d; y = &d;}
    foo(x,y);
------- LABEL 1
------- LABEL 2
	
}

void foo(int **p, int **q){
	*p = *q;
}

[ANSWER]
Ground Truth: The two pointer expressions NO alias
LLM Analysis:
1. POINTERS: d,&t
2. RESULT: MAY
3. REASON: Depending on the execution path, `d` may be assigned to `x` and `y`, and since `y` can point to `&t`, `d` and `&t` may alias through the function `foo`.
